---
title: "gaps"
author: "Julie Jung"
date: "July 19, 2021"
output:
  pdf_document: default
  html_document:
    df_print: paged
editor_options: 
  chunk_output_type: console
---

Data analysis from gap experiment (conducted 2013 to 2017)

# libraries

```{r, warnings=F, echo=T, results='hide'}
library("here")
library("openxlsx")
library("janitor")
library(ggplot2)
library(ggbeeswarm)
library(cowplot)
library(MASS)
library(multcomp)
library("stargazer")
library("knitr")
library(tidyr)
library("dplyr")
library(sciplot) 
library(aod)
library(lme4)
library(dunn.test)
library(DescTools) #dunnett's test
library(R.matlab)
```

#FFTs

```{r}
FFT.df<-read.csv("gaps_FFTs.csv", stringsAsFactors = TRUE)
```

```{r}
widerFFTs <- FFT.df %>% 
  pivot_longer(-Frequencies, names_to = "Treatment", values_to = "Amps")

str(widerFFTs)
max(widerFFTs$Amps)
```

```{r}
StimColors <- c("black", "red")

Stim_fig <- ggplot(data=widerFFTs, aes(x=Frequencies, y=Amps, color=Treatment)) +
  geom_line(size=1) +
  scale_y_continuous(limits=c(50, 85),
                     breaks=c(84.58859-40, 84.58859-30, 84.58859-20, 84.58859-10, 84.58859), 
                     labels=c("-40", " ", "-20", " ", "0"))+
  scale_x_continuous(limits=c(0, 200),
                     breaks=c(0, 50, 100, 150, 200),
                     labels=c("0", " ", "100", " ", "200"))+
  labs(x = "Frequency (Hz)",
       y = "Relative amplitude (dB)") +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  theme_cowplot(font_size = 12, line_size = 1, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=12, colour= "black")) +
  theme(axis.text.x=element_text(size=12, colour= "black")) +
  theme(axis.title.x=element_text(size=12, colour = "black")) +
  theme(axis.title.y=element_text(size=12, colour = "black")) +
  theme(legend.justification = c(1, 1), legend.position = c(0.9, 0.7), legend.text=element_text(size=12)) +
  scale_colour_manual(name=Treatment,
                      values=StimColors,
                      aesthetics = "colour",
                      guide="legend") +
  theme(legend.position = "NONE") +
  annotate("text", x = 160, y = 62, size=4, color="black", label = "Tines")+
  annotate("text", x = 130, y = 55, size=4, color="red", label = "Tray")
Stim_fig
```

```{r}
ggsave("~/Desktop/StimFig_v2.pdf", 
 plot = Stim_fig, # or give ggplot object name as in myPlot,
 width = 18, height = 10, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 300, 
 useDingbats=FALSE)
```

# stimulus fig (exp1)

```{r}
library(tuneR)
stimA<- readWave('stimulus_21-primer_only.wav') 
stimB<-readWave('stimulus_17-little_bursts.wav') 
stimC<- readWave('stimulus_16-base_pattern.wav')
stimD<- readWave('stimulus_22-30s_gap.wav')

```

```{r}
str(stimA) # the wav file has one channel (@left) containing 132300 sample points each
str(stimB) #6725250
str(stimC) #6615000
str(stimD) #7375725

# extract signal
sA<- stimA@left #we’ll select and work only with one of the channels from now onwards
sB <- stimB@left
sC <- stimC@left
sD <- stimD@left

# determine duration
#can use str() to calculate duration = sample points / sample rate 
length(sA)/stimA@samp.rate #6 s
length(sB)/stimB@samp.rate #305 s
length(sC)/stimC@samp.rate #300 s
length(sD)/stimD@samp.rate #334.5 s
```

```{r}
#If our wav file has a 16-bit depth (train_audio@bit), this means that the sound pressure values are mapped to integer values that can range from -2^¹⁵ to (2^¹⁵)-1.
#convert our sound array to floating point values ranging from -1 to 1 as follows:
sA <- sA / 2^(stimA@bit -1)
sB <- sB / 2^(stimB@bit -1)
sC <- sC / 2^(stimC@bit -1)
sD <- sD / 2^(stimD@bit -1)

 #Create an array containing the time points first:
sA.timeArray <- (0:(length(sA)-1)) / stimA@samp.rate
sB.timeArray <- (0:(length(sB)-1)) / stimB@samp.rate
sC.timeArray <- (0:(length(sC)-1)) / stimC@samp.rate
sD.timeArray <- (0:(length(sD)-1)) / stimD@samp.rate

sA.df<- data.frame(sA.timeArray, sA)
sB.df<- data.frame(sB.timeArray, sB)
sC.df<- data.frame(sC.timeArray, sC)
sD.df<- data.frame(sD.timeArray, sD)
```

A time representation of the sound can be obtained by plotting the pressure values against the time axis.

```{r}
# demean to remove DC offset
sA = sA - mean(sA)
sB = sB - mean(sB)
sC = sC - mean(sC)
sD = sD - mean(sD)

# plot waveform
sAfig<- plot(sA, type = 'l', xlab = 'Samples', ylab = 'Amplitude', xlim=c(0,length(sA)))
sBfig<- plot(sB, type = 'l', xlab = 'Samples', ylab = 'Amplitude', xlim=c(0,length(sB)))
sCfig<- plot(sC, type = 'l', xlab = 'Samples', ylab = 'Amplitude', xlim=c(0,length(sC)))
sDfig<- plot(sD, type = 'l', xlab = 'Samples', ylab = 'Amplitude', xlim=c(0,length(sD)))
```

```{r}
sA.sub<-sA.df[seq(1, nrow(sA.df), 500), ] #take every 500 rows
sB.sub<-sB.df[seq(1, nrow(sB.df), 500), ] #take every 500 rows
sC.sub<-sC.df[seq(1, nrow(sC.df), 500), ] #take every 500 rows
sD.sub<-sD.df[seq(1, nrow(sD.df), 500), ] #take every 500 rows
```

```{r}
sAfig <- ggplot(data=sA.sub, aes(x=sA.timeArray, y=sA)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sAfig
```

```{r}
sBfig<- ggplot(data=sB.sub, aes(x=sB.timeArray, y=sB)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sBfig
```

```{r}
sCfig <- ggplot(data=sC.sub, aes(x=sC.timeArray, y=sC)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sCfig
```

```{r}
sDfig <- ggplot(data=sD.sub, aes(x=sD.timeArray, y=sD)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sDfig
```

combine plots 
```{r}
Exp1_stimuli <- plot_grid(sAfig, sBfig, sCfig, sDfig, labels = "AUTO", axis = "br", ncol = 1, nrow=4, align = 'v')

ggsave("~/Desktop/Exp1_stimuli_v2.pdf", 
 plot = Exp1_stimuli, # or give ggplot object name as in myPlot,
 width = 18, height = 20, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 300, 
 useDingbats=FALSE)
```

#stimulus fig (exp2)
```{r}
stimC<- readWave('stimulus_16-base_pattern.wav')
stimE<- readWave('stimulus_27-3bursts.wav') 
stimF<-readWave('stimulus_28-10bursts.wav') 
```

```{r}
str(stimC) # the wav file has one channel (@left) containing 6615000 sample points each
str(stimE) #6945750
str(stimF) #6824475

# extract signal
sC<- stimC@left #we’ll select and work only with one of the channels from now onwards
sE <- stimE@left
sF <- stimF@left

# determine duration
#can use str() to calculate duration = sample points / sample rate 
length(sC)/stimC@samp.rate #300 s
length(sE)/stimE@samp.rate #315 s
length(sF)/stimF@samp.rate #309.5 s
```

```{r}
#If our wav file has a 16-bit depth (train_audio@bit), this means that the sound pressure values are mapped to integer values that can range from -2^¹⁵ to (2^¹⁵)-1.
#convert our sound array to floating point values ranging from -1 to 1 as follows:
sC <- sC / 2^(stimC@bit -1)
sE <- sE / 2^(stimE@bit -1)
sF <- sF / 2^(stimF@bit -1)

 #Create an array containing the time points first:
sC.timeArray <- (0:(length(sC)-1)) / stimC@samp.rate
sE.timeArray <- (0:(length(sE)-1)) / stimE@samp.rate
sF.timeArray <- (0:(length(sF)-1)) / stimF@samp.rate

sC.df<- data.frame(sC.timeArray, sC)
sE.df<- data.frame(sE.timeArray, sE)
sF.df<- data.frame(sF.timeArray, sF)
```

A time representation of the sound can be obtained by plotting the pressure values against the time axis.

```{r}
# demean to remove DC offset
sC = sC - mean(sC)
sE = sE - mean(sE)
sF = sF - mean(sF)
```

```{r}
sC.sub<-sC.df[seq(1, nrow(sC.df), 500), ] #take every 500 rows
sE.sub<-sE.df[seq(1, nrow(sE.df), 500), ] #take every 500 rows
sF.sub<-sF.df[seq(1, nrow(sF.df), 500), ] #take every 500 rows
```

```{r}
sCfig <- ggplot(data=sC.sub, aes(x=sC.timeArray, y=sC)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sCfig
```

```{r}
sEfig <- ggplot(data=sE.sub, aes(x=sE.timeArray, y=sE)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sEfig
```


```{r}
sFfig<- ggplot(data=sF.sub, aes(x=sF.timeArray, y=sF)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sFfig
```

combine plots 
```{r}
Exp2_stimuli <- plot_grid(sCfig, sEfig, sFfig, labels = "AUTO", axis = "br", ncol = 1, nrow=3, align = 'v')

ggsave("~/Desktop/Exp2_stimuli_v2.pdf", 
 plot = Exp2_stimuli, # or give ggplot object name as in myPlot,
 width = 18, height = 20, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 300, 
 useDingbats=FALSE)
```

#stimulus fig (exp3)

```{r}
#stimC<- readWave('stimulus_16-base_pattern.wav')
stimD_after3p <- readWave('stimulus_30.wav')
stimG<- readWave('stimulus_31-after_17_pulses.wav') 
stimH<-readWave('stimulus_32-after_43_pulses.wav') 
```

```{r}
str(stimD_after3p) #7210350
str(stimG) #7210350
str(stimH) #7210350

# extract signal
sD3 <- stimD_after3p@left
sG <- stimG@left
sH <- stimH@left

# determine duration
#can use str() to calculate duration = sample points / sample rate 
length(sD3)/stimD_after3p@samp.rate #327
length(sG)/stimG@samp.rate #327 s
length(sH)/stimH@samp.rate #327 s
```

```{r}
#If our wav file has a 16-bit depth (train_audio@bit), this means that the sound pressure values are mapped to integer values that can range from -2^¹⁵ to (2^¹⁵)-1.
#convert our sound array to floating point values ranging from -1 to 1 as follows:
sG <- sG / 2^(stimG@bit -1)
sH <- sH / 2^(stimH@bit -1)

 #Create an array containing the time points first:
sG.timeArray <- (0:(length(sG)-1)) / stimG@samp.rate
sH.timeArray <- (0:(length(sH)-1)) / stimH@samp.rate

sG.df<- data.frame(sG.timeArray, sG)
sH.df<- data.frame(sH.timeArray, sH)
```

A time representation of the sound can be obtained by plotting the pressure values against the time axis.

```{r}
# demean to remove DC offset
sG = sG - mean(sG)
sH = sH - mean(sH)
```

```{r}
#sC.sub<-sC.df[seq(1, nrow(sC.df), 500), ] #take every 500 rows
sG.sub<-sG.df[seq(1, nrow(sG.df), 500), ] #take every 500 rows
sH.sub<-sH.df[seq(1, nrow(sH.df), 500), ] #take every 500 rows
```

```{r}
sGfig <- ggplot(data=sG.sub, aes(x=sG.timeArray, y=sG)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sGfig
```


```{r}
sHfig<- ggplot(data=sH.sub, aes(x=sH.timeArray, y=sH)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sHfig
```

combine plots 
```{r}
Exp3_stimuli <- plot_grid(sCfig, sDfig, sGfig, sHfig, labels = "AUTO", axis = "br", ncol = 1, nrow=4, align = 'v')

ggsave("~/Desktop/Exp3_stimuli_v1.pdf", 
 plot = Exp3_stimuli, # or give ggplot object name as in myPlot,
 width = 18, height = 20, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 300, 
 useDingbats=FALSE)
```

#stimulus fig (exp4)
```{r}
#stimC<- readWave('stimulus_16-base_pattern.wav')
#stimD<- readWave('---')
stimI<- readWave('gapped45sec.wav') 
stimJ<-readWave('gapped1min.wav') 
```

```{r}
str(stimI) #7574175
str(stimJ) #7904925

# extract signal
sI <- stimI@left
sJ <- stimJ@left

# determine duration
#can use str() to calculate duration = sample points / sample rate 
length(sI)/stimI@samp.rate #343.5 s
length(sJ)/stimJ@samp.rate #358.5 s
```

```{r}
#If our wav file has a 16-bit depth (train_audio@bit), this means that the sound pressure values are mapped to integer values that can range from -2^¹⁵ to (2^¹⁵)-1.
#convert our sound array to floating point values ranging from -1 to 1 as follows:
sI <- sI / 2^(stimI@bit -1)
sJ <- sJ / 2^(stimJ@bit -1)

 #Create an array containing the time points first:
sI.timeArray <- (0:(length(sI)-1)) / stimI@samp.rate
sJ.timeArray <- (0:(length(sJ)-1)) / stimJ@samp.rate

sI.df<- data.frame(sI.timeArray, sI)
sJ.df<- data.frame(sJ.timeArray, sJ)


sI.sub<-sI.df[seq(1, nrow(sI.df), 600), ] 
sJ.sub<-sJ.df[seq(1, nrow(sJ.df), 700), ] 
```

A time representation of the sound can be obtained by plotting the pressure values against the time axis.

```{r}
# demean to remove DC offset
sI = sI - mean(sI)
sJ = sJ - mean(sJ)
```

```{r}
sIfig <- ggplot(data=sI.sub, aes(x=sI.timeArray, y=sI)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sIfig
```


```{r}
sJfig<- ggplot(data=sJ.sub, aes(x=sJ.timeArray, y=sJ)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 360),
                     breaks=c(0, 60, 120, 180, 240, 300, 360), 
                     labels=c("0", "60", "120", "180", "240", "300", "360"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

sJfig
```

combine plots 
```{r}
Exp4_stimuli <- plot_grid(sCfig, sDfig, sIfig, sJfig, labels = "AUTO", axis = "br", ncol = 1, nrow=4, align = 'v')

ggsave("~/Desktop/Exp4_stimuli_v3.pdf", 
 plot = Exp4_stimuli, # or give ggplot object name as in myPlot,
 width = 18, height = 20, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 300, 
 useDingbats=FALSE)
```

#snake sample fig

```{r}
snake_sample<- readWave('ImantodesSample-2003-C631b[2303].wav') 
```

```{r}
str(snake_sample) #330728

# extract signal
snake <- snake_sample@left

# determine duration
#can use str() to calculate duration = sample points / sample rate 
length(snake)/snake_sample@samp.rate #15 s
```

```{r}
#If our wav file has a 16-bit depth (train_audio@bit), this means that the sound pressure values are mapped to integer values that can range from -2^¹⁵ to (2^¹⁵)-1.
#convert our sound array to floating point values ranging from -1 to 1 as follows:
snake <- snake / 2^(snake_sample@bit -1)

 #Create an array containing the time points first:
snake.timeArray <- (0:(length(snake)-1)) / snake_sample@samp.rate

snake.df<- data.frame(snake.timeArray, snake)

snake.sub<-snake.df[seq(1, nrow(snake.df), 500), ] #take every 600 rows
```

A time representation of the sound can be obtained by plotting the pressure values against the time axis.

```{r}
# demean to remove DC offset
snake = snake - mean(snake)
```

```{r}
snakefig <- ggplot(data=snake.sub, aes(x=snake.timeArray, y=snake)) +
  geom_line(size=0.25) +
  scale_x_continuous(limits=c(0, 15),
                     breaks=c(0, 5, 10, 15), 
                     labels=c("0", "5", "10", "15"))+
  scale_y_continuous(labels=NULL) +
  labs(x = "Time (s)",
       y = "Amplitude") +
  theme_cowplot(font_size = 16, line_size = 0.75, font_family="Helvetica") +
  theme(axis.text.y=element_text(size=16, colour= "black")) +
  theme(axis.text.x=element_text(size=16, colour= "black")) +
  theme(axis.title.x=element_text(size=16, colour = "black")) +
  theme(axis.title.y=element_text(size=16, colour = "black"))+
  theme(legend.position = "NONE")

snakefig
```

combine plots 
```{r}
ggsave("~/Desktop/snakefig2.pdf", 
 plot = snakefig, # or give ggplot object name as in myPlot,
 width = 18, height = 13, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 300, 
 useDingbats=FALSE)
```

#Hatching Data: 

ALL exps I-IV

```{r}
data <- read.xlsx(xlsxFile="gaps_combined_20210719.xlsx", sheet="data") %>%
  clean_names() %>%
  remove_empty() %>%
  mutate(age_d=age + s_uhour/24 + s_umin/(60*24)) %>%
  fill(for_n_prop_h)

data$experiment<-as.factor(data$experiment)
data$clutch<-as.factor(data$clutch)
data$stimulus<-as.factor(data$stimulus)
data$tines_trays<-as.factor(data$tines_trays)
```

# Ages

```{r StageSummary}
quantile(data$age_d, na.rm=T)
mean(data$age_d, na.rm=T)
se(data$age_d)
```

# Compare controls

```{r}
controls_a <- subset(tines, tines$for_n_prop_h=="A", na.rm=T)

#controls_a_0<-betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback)~1, ~1, data=controls_a)

#controls_a_1<-betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback)~stimulus, ~1, data=controls_a)

#anova(controls_a_0, controls_a_1)  #stim A is not different across diff exps 

#dunn.test(controls_a$proportion_hatched, controls_a$stimulus, method = "bonferroni", kw=TRUE, wrap=TRUE)

pairwise.wilcox.test(controls_a$proportion_hatched, 
                     controls_a$stimulus, 
                     p.adjust.method = "none")
```

```{r}
kruskal.test(proportion_hatched ~ stimulus, data=controls_a)
```

```{r}
controls_b <- subset(tines, tines$for_n_prop_h=="B", na.rm=T)

#controls_b_0<-betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback)~1, ~1, data=controls_b)

#controls_b_1<-betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback)~stimulus, ~1, data=controls_b)

#anova(controls_b_0, controls_b_1)  #stim A is not different across diff exps 

#dunn.test(controls_b$proportion_hatched, controls_b$stimulus, method = "bonferroni", kw=TRUE, wrap=TRUE)

pairwise.wilcox.test(controls_b$proportion_hatched, 
                     controls_b$stimulus, 
                     p.adjust.method = "none")
```

```{r}
kruskal.test(proportion_hatched ~ stimulus, data=controls_b)
```

```{r}
controls_c <- subset(tines, tines$for_n_prop_h=="C", na.rm=T)

#controls_c_0<-betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback)~1, ~1, data=controls_c)

#controls_c_1<-betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback)~stimulus, ~1, data=controls_c)

#anova(controls_c_0, controls_c_1)  #stim C is not different across diff exps 

#dunn.test(controls_c$proportion_hatched, controls_c$stimulus, method = "bonferroni", kw=TRUE, wrap=TRUE)

pairwise.wilcox.test(controls_c$proportion_hatched, 
                     controls_c$stimulus, 
                     p.adjust.method = "none")
```

```{r}
kruskal.test(proportion_hatched ~ stimulus, data=controls_c)
```

Since the mean proportions in response to stim C are diff between tines and trays, I have to separate these out. 

```{r}
controls_d <- subset(data, data$for_n_prop_h=="D", na.rm=T)

#controls_d_0<-betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback)~1, ~1, data=controls_d)

#controls_d_1<-betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback)~stimulus, ~1, data=controls_d)

#anova(controls_d_0, controls_d_1)  #stim D is not different across diff exps

#dunn.test(controls_d$proportion_hatched, controls_d$stimulus, method = "bonferroni", kw=TRUE, wrap=TRUE)

pairwise.wilcox.test(controls_d$proportion_hatched, 
                     controls_d$stimulus, 
                     p.adjust.method = "none")
```

Since the mean proportions in response to stim D are diff between tines and trays, I have to separate these out. 

# Sample sizes

```{r}
N_all_stim_phat<-
  data %>%
  group_by(experiment, for_n_prop_h) %>%
  summarize(count = n(),
            mean = mean(proportion_hatched, na.rm=T),
            SE = se(proportion_hatched, na.rm=T)
            )
kable(N_all_stim_phat,title="Mean & SE",digits=4)
```

Separate exps I-III and IV
```{r}
tines <- subset(data, experiment!=4)
trays <- subset(data, experiment==4)
```

```{r}
kruskal.test(proportion_hatched ~ tines_trays, data=tines)
kruskal.test(proportion_hatched ~ tines_trays, data=trays)
```

#Exp 1

####fig

```{r}
exp1_combined <- subset(tines, tines$for_n_prop_h=="A"|tines$for_n_prop_h=="B"|tines$for_n_prop_h=="C"|tines$for_n_prop_h=="D")
```

```{r}
N_clutches_e1<-
  exp1_combined %>%
  group_by(for_n_prop_h) %>%
  summarize(count = n(),
            mean = mean(proportion_hatched, na.rm=T),
            SE = se(proportion_hatched, na.rm=T)
            )
kable(N_clutches_e1,title="Mean & SE",digits=4)
```

```{r}
fig_e1 <- exp1_combined %>% ggplot() +
  aes(x=as.factor(for_n_prop_h), y=proportion_hatched) +
  geom_boxplot(size=0.75, width=0.15, outlier.shape = NA) +
  #geom_point(aes(x=tines_trays, y=proportion_hatched,color=tines_trays), position=position_jitterdodge(jitter.width=0.5)) +
  geom_beeswarm(size=2)+
  #geom_quasirandom()+
  scale_y_continuous(limits=c(0, 1),
                     breaks=c(0, 0.25, 0.5, 0.75, 1),
                     labels=c("0", " ", "0.5", " ", "1")
                     )+
  scale_x_discrete(labels=c("A", "B", "C", "D")) + 
  labs(x = "Stimulus", 
       y = "Proportion hatched") +
  theme(panel.background = element_blank())+
  #theme_cowplot(font_size = 15, line_size = 0.75, font_family="Helvetica") +
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  #theme(axis.text.y=element_text(colour= "black")) +
  #theme(axis.text.x=element_text(colour= "black")) +
  #theme(axis.title.x=element_text(colour = "black")) +
  #theme(axis.title.y=element_text(colour = "black")) +
  theme(legend.position="none")+
  theme(axis.ticks.length=unit(-0.25, "cm"), axis.text.x = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")), axis.text.y = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")) )

fig_e1
```

```{r}
ggsave("~/Desktop/fig_e1.pdf", 
 plot = fig_e1, # or give ggplot object name as in myPlot,
 width = 16, height = 16, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 400, 
 useDingbats=FALSE)
```

#### stats for phat per clutch

```{r}
shapiro.test(exp1_combined$proportion_hatched) #P<0.05, so not normal 
```

```{r}
kruskal.test(proportion_hatched ~ for_n_prop_h, data=exp1_combined)
```

```{r}
#dunn.test(exp1_combined$proportion_hatched, exp1_combined$tines_trays, method = "bonferroni", kw=TRUE, wrap=TRUE)

#DunnettTest(exp1_combined$proportion_hatched, exp1_combined$tines_trays, control="C")

test<-pairwise.wilcox.test(exp1_combined$proportion_hatched,
                     exp1_combined$for_n_prop_h, 
                     p.adjust.method = "none")
```

```{r}
library(multcompView)
test$p.value
library(reshape)
(a <- melt(test$p.value))
a.cc  <-  na.omit(a)
a.pvals  <-  a.cc[, 3]
names(a.pvals)  <-  paste(a.cc[, 1], a.cc[, 2], sep="-")
a.pvals
multcompLetters(a.pvals)
```


Is hatching response to stim A or stim B significantly diff from 0?

```{r}
stimA <- subset(tines, tines$for_n_prop_h=="A")
stimB <- subset(tines, tines$for_n_prop_h=="B")

stimAB <- subset(tines, tines$for_n_prop_h=="A"|tines$for_n_prop_h=="B")

stimCD <- subset(tines, tines$for_n_prop_h=="C"|tines$for_n_prop_h=="D")
```

Does 95% CI include 0?

```{r}
wilcox.test(stimA$proportion_hatched, mu=0, conf.int=T, conf.level=0.95)

mean(stimAB$proportion_hatched)
se(stimAB$proportion_hatched)

wilcox.test(stimB$proportion_hatched, mu=0, conf.int=T, conf.level=0.95)

mean(stimB$proportion_hatched)
median(stimB$proportion_hatched)
se(stimB$proportion_hatched)

wilcox.test(stimCD$proportion_hatched ~ stimCD$for_n_prop_h, conf.int=T, conf.level=0.95)
```
So if stim A and B are not zero, next test for an interaction. ie. is the increase in hatching from base (stim C) to base +prefix (stim D) simply additive with the prefix?

consider ONLY stimuli A, C, and D. 

```{r}
exp1_combined_ACD <- subset(tines, tines$for_n_prop_h=="A"|tines$for_n_prop_h=="C"|tines$for_n_prop_h=="D")

hist(exp1_combined_ACD$proportion_hatched)
```

```{r}
model1 <- betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback) ~ 1, ~1, data=exp1_combined_ACD)

model2 <- betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback) ~ prefix, ~1, data=exp1_combined_ACD)

model3 <- betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback) ~ base_p, ~1, data=exp1_combined_ACD)

model4 <- betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback) ~ base_p + prefix, ~1, data=exp1_combined_ACD)

model5 <- betabin(cbind(hatched_during_playback, competent_and_no_hatch_during_playback) ~ base_p * prefix, ~1, data=exp1_combined_ACD)

Anova(model2)
```

What are the effect sizes? 

```{r}
# library(rstatix)
# 
# stimA %>% wilcox_test(proportion_hatched ~ 1, mu=0)
# stimA %>% wilcox_effsize(proportion_hatched ~ 1, mu=0)
# 
# stimB %>% wilcox_test(proportion_hatched ~ 1, mu=0)
# stimB %>% wilcox_effsize(proportion_hatched ~ 1, mu=0)
# 
# stimCD %>% wilcox_test(proportion_hatched ~ for_n_prop_h)
# stimCD %>% wilcox_effsize(proportion_hatched ~ for_n_prop_h)
```

#### stats for hat per individual

# Exp 2

#### fig

```{r}
exp2_combined <- subset(tines, tines$for_n_prop_h=="C"|tines$for_n_prop_h=="E"|tines$for_n_prop_h=="F")
```

```{r}
N_clutches_e2<-
  exp2_combined %>%
  group_by(for_n_prop_h) %>%
  summarize(count = n(),
            mean = mean(proportion_hatched, na.rm=T),
            SE = se(proportion_hatched, na.rm=T)
            ) #%>%
  #filter(!is.na(for_n_prop_h))
kable(N_clutches_e2,title="Mean & SE",digits=4)
```

```{r}
fig_e2 <- exp2_combined %>% ggplot() +
  aes(x=as.factor(for_n_prop_h), y=proportion_hatched) +
  geom_boxplot(size=0.75, width=0.15, outlier.shape = NA) +
  geom_beeswarm(size=2)+
  scale_y_continuous(limits=c(0, 1),
                     breaks=c(0, 0.25, 0.5, 0.75, 1),
                     labels=c("0", " ", "0.5", " ", "1")
                     )+
  scale_x_discrete(labels=c("C", "E", "F")) + 
  labs(x = "Stimulus", 
       y = "Proportion hatched") +
  theme(panel.background = element_blank())+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  theme(legend.position="none")+
  theme(axis.ticks.length=unit(-0.25, "cm"), axis.text.x = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")), axis.text.y = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")) )

fig_e2
```

```{r}
ggsave("~/Desktop/fig_e2.pdf", 
 plot = fig_e2, # or give ggplot object name as in myPlot,
 width = 16, height = 16, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 400, 
 useDingbats=FALSE)
```

#### stats for phat per clutch


```{r}
shapiro.test(exp2_combined$proportion_hatched) #P<0.05, so not normal 

kruskal.test(proportion_hatched ~ for_n_prop_h, data=exp2_combined)

test<-pairwise.wilcox.test(exp2_combined$proportion_hatched,
                     exp2_combined$for_n_prop_h, 
                     p.adjust.method = "none")
```

```{r}
#library(multcompView)
test$p.value
#library(reshape)
(a <- melt(test$p.value))
a.cc  <-  na.omit(a)
a.pvals  <-  a.cc[, 3]
names(a.pvals)  <-  paste(a.cc[, 1], a.cc[, 2], sep="-")
a.pvals
multcompLetters(a.pvals)
```

If you consider a per-pulse basis, i.e. if you calculate proportion hatched by the number of pulses in each stimulus (PH/150 or PH/30, etc) is the hatching response actually *relatively higher* for the stimulus with fewer pulses? Probably yes? even though N is low. 

```{r}
exp2_combined <- exp2_combined %>% 
  mutate(perpulse = case_when(for_n_prop_h=="C" ~ proportion_hatched/150,
                              for_n_prop_h=="E" ~ proportion_hatched/30,
                              for_n_prop_h=="F" ~ proportion_hatched/70)) %>% 
  mutate(normalized_perpulse = (perpulse-min(perpulse))/(max(perpulse)-min(perpulse)))

```

```{r}
shapiro.test(exp2_combined$perpulse) #P<0.05, so not normal 

kruskal.test(perpulse ~ for_n_prop_h, data=exp2_combined)

test<-pairwise.wilcox.test(exp2_combined$perpulse,
                     exp2_combined$for_n_prop_h, 
                     p.adjust.method = "none")
```

```{r}
#library(multcompView)
test$p.value
#library(reshape)
(a <- melt(test$p.value))
a.cc  <-  na.omit(a)
a.pvals  <-  a.cc[, 3]
names(a.pvals)  <-  paste(a.cc[, 1], a.cc[, 2], sep="-")
a.pvals
multcompLetters(a.pvals)
```

Revise figure

```{r}
range(exp2_combined$normalized_perpulse)

fig_e2_perpulse <- exp2_combined %>% ggplot() +
  aes(x=as.factor(for_n_prop_h), y=normalized_perpulse) +
  geom_boxplot(size=0.75, width=0.15, outlier.shape = NA, color="red") +
  geom_beeswarm(size=2, color="red")+
  scale_y_continuous(limits=c(0, 1),
                     breaks=c(0, 0.01, 1),
                     labels=c("0", "0.01", "1")
                     )+
  scale_x_discrete(labels=c("C", "E", "F")) + 
  labs(x = "Stimulus", 
       y = "Normalized hatching response per pulse") +
  theme(panel.background = element_blank())+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  theme(legend.position="none")+
  theme(axis.ticks.length=unit(-0.25, "cm"), axis.text.x = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")), axis.text.y = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")) )

fig_e2_perpulse
```

```{r}
ggsave("~/Desktop/fig_e2_perpulse.pdf", 
 plot = fig_e2_perpulse, # or give ggplot object name as in myPlot,
 width = 16, height = 16, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 400, 
 useDingbats=FALSE)
```

#### stats for hatching per individual


# Exp 3

####fig

```{r}
exp3_combined <- subset(tines, tines$for_n_prop_h=="C"| tines$for_n_prop_h=="D"|tines$for_n_prop_h=="G"|tines$for_n_prop_h=="H")
```

```{r}
N_clutches_e3<-
  exp3_combined %>%
  group_by(for_n_prop_h) %>%
  summarize(count = n(),
            mean = mean(proportion_hatched, na.rm=T),
            SE = se(proportion_hatched, na.rm=T)
            )
kable(N_clutches_e3,title="Mean & SE",digits=4)
```

```{r}
fig_e3 <- exp3_combined %>% ggplot() +
  aes(x=as.factor(for_n_prop_h), y=proportion_hatched) +
  geom_boxplot(size=0.75, width=0.15, outlier.shape = NA) +
  geom_beeswarm(size=2)+
  scale_y_continuous(limits=c(0, 1),
                     breaks=c(0, 0.25, 0.5, 0.75, 1),
                     labels=c("0", " ", "0.5", " ", "1")
                     )+
  scale_x_discrete(labels=c("C", "D", "G", "H")) + 
  labs(x = "Stimulus", 
       y = "Proportion hatched") +
  theme(panel.background = element_blank())+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  theme(legend.position="none")+
  theme(axis.ticks.length=unit(-0.25, "cm"), axis.text.x = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")), axis.text.y = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")) )

fig_e3
```

```{r}
ggsave("~/Desktop/fig_e3.pdf", 
 plot = fig_e3, # or give ggplot object name as in myPlot,
 width = 16, height = 16, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 400, 
 useDingbats=FALSE)
```
#### stats

```{r}
shapiro.test(exp3_combined$proportion_hatched) #P<0.05, so not normal 
kruskal.test(proportion_hatched ~ for_n_prop_h, data=exp3_combined)

test<-pairwise.wilcox.test(exp3_combined$proportion_hatched,
                     exp3_combined$for_n_prop_h, 
                     p.adjust.method = "none")
```

```{r}
#library(multcompView)
test$p.value
#library(reshape)
(a <- melt(test$p.value))
a.cc  <-  na.omit(a)
a.pvals  <-  a.cc[, 3]
names(a.pvals)  <-  paste(a.cc[, 1], a.cc[, 2], sep="-")
a.pvals
multcompLetters(a.pvals)
```

# Exp 4

####fig

```{r}
exp4_combined <- subset(trays, trays$for_n_prop_h=="C"|trays$for_n_prop_h=="D"|trays$for_n_prop_h=="I"|trays$for_n_prop_h=="J")
```

```{r}
N_trays_e4<-
  exp4_combined %>%
  group_by(for_n_prop_h) %>%
  summarize(count = n(),
            mean = mean(proportion_hatched, na.rm=T),
            SE = se(proportion_hatched, na.rm=T)
            )
kable(N_trays_e4,title="Mean & SE",digits=4)
```

```{r}
clutches_e4<-
  exp4_combined %>%
  group_by(for_n_prop_h, clutch) %>%
  summarize(num = n(), #sample sizes
            mean = mean(proportion_hatched, na.rm=TRUE)
            )
kable(clutches_e4, digits=3)
  
N_clutches_e4 <- clutches_e4 %>%
  group_by(for_n_prop_h) %>%
  summarise(clutches= n(), 
            mean = mean(mean, na.rm=TRUE),
            median = median(mean, na.rm=TRUE),
            SE = sd(mean, na.rm=TRUE)/sqrt(n())
            )
kable(N_clutches_e4, digits=3)
```

```{r}
fig_e4 <- exp4_combined %>% ggplot() +
  aes(x=as.factor(for_n_prop_h), y=proportion_hatched) +
  geom_boxplot(size=0.75, width=0.15, outlier.shape = NA) +
  geom_beeswarm(size=2)+
  scale_y_continuous(limits=c(0, 1),
                     breaks=c(0, 0.25, 0.5, 0.75, 1),
                     labels=c("0", " ", "0.5", " ", "1")
                     )+
  scale_x_discrete(labels=c("C", "D", "I", "J")) + 
  labs(x = "Stimulus", 
       y = "Proportion hatched") +
  theme(panel.background = element_blank())+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  theme(legend.position="none")+
  theme(axis.ticks.length=unit(-0.25, "cm"), axis.text.x = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")), axis.text.y = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")) )

fig_e4
```

```{r}
ggsave("~/Desktop/fig_e4.pdf", 
 plot = fig_e4, # or give ggplot object name as in myPlot,
 width = 16, height = 16, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 400, 
 useDingbats=FALSE)
```

#### stats

```{r}
shapiro.test(exp4_combined$proportion_hatched) #P<0.05, so not normal 
kruskal.test(proportion_hatched ~ for_n_prop_h, data=exp4_combined)

test<-pairwise.wilcox.test(exp4_combined$proportion_hatched,
                     exp4_combined$for_n_prop_h, 
                     p.adjust.method = "none")
```

```{r}
#library(multcompView)
test$p.value
#library(reshape)
(a <- melt(test$p.value))
a.cc  <-  na.omit(a)
a.pvals  <-  a.cc[, 3]
names(a.pvals)  <-  paste(a.cc[, 1], a.cc[, 2], sep="-")
a.pvals
multcompLetters(a.pvals)
```


#### latency to hatch 

```{r}
ltoh_exp4_combined <- subset(trays, trays$for_n_lto_h=="C"|trays$for_n_lto_h=="D"|trays$for_n_lto_h=="I"|trays$for_n_lto_h=="J")
```

```{r}
N_trays_ltoh_e4<-
  ltoh_exp4_combined %>%
  group_by(for_n_lto_h) %>%
  summarize(count = n(),
            mean = mean(lto_h, na.rm=T),
            SE = se(lto_h, na.rm=T)
            )
kable(N_trays_ltoh_e4,title="Mean & SE",digits=4)
```

```{r}
ltoh_clutches_e4<-
  ltoh_exp4_combined %>%
  group_by(for_n_lto_h, clutch) %>%
  summarize(num = n(), #sample sizes
            meanlat = mean(lto_h, na.rm=TRUE)
            )
kable(ltoh_clutches_e4, digits=3)

N_ltoh_clutches_e4 <- ltoh_clutches_e4 %>%
  group_by(for_n_lto_h) %>%
  summarise(clutches= n(), 
            meanlatency = mean(meanlat, na.rm=TRUE),
            medianlatency = median(meanlat, na.rm=TRUE),
            SEnumlatency = sd(meanlat, na.rm=TRUE)/sqrt(n())
            )
kable(N_ltoh_clutches_e4, digits=3)
```


```{r}
range(ltoh_exp4_combined$lto_h, na.rm=T)

ltoh_fig_e4_v2 <- ltoh_exp4_combined %>% ggplot() +
  aes(x=as.factor(for_n_lto_h), y=lto_h) +
  geom_boxplot(size=0.75, width=0.15, outlier.shape = NA) +
  geom_beeswarm(size=2)+
  scale_y_continuous(limits=c(0, 2.3),
                     breaks=c(0, 0.5, 1, 1.5, 2),
                     labels=c("0", "0.5", "1", "1.5", "2")
                     )+
  scale_x_discrete(labels=c("C", "D", "I", "J")) + 
  labs(x = "Stimulus", 
       y = "Latency to hatch (m)") +
  theme(panel.background = element_blank())+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  theme(legend.position="none")+
  theme(axis.ticks.length=unit(-0.25, "cm"), axis.text.x = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")), axis.text.y = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")) )

ltoh_fig_e4_v2
```

```{r}
ggsave("~/Desktop/e4_ltoh_boxplots.pdf", 
 plot = ltoh_fig_e4_v2, # or give ggplot object name as in myPlot,
 width = 16, height = 16, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 400, 
 useDingbats=FALSE)
```

#### stats

```{r}
shapiro.test(ltoh_exp4_combined$lto_h) #P<0.05, so not normal 

test<-pairwise.wilcox.test(ltoh_exp4_combined$lto_h,          ltoh_exp4_combined$for_n_lto_h, 
                     p.adjust.method = "none")
```

```{r}
#library(multcompView)
test$p.value
#library(reshape)
(a <- melt(test$p.value))
a.cc  <-  na.omit(a)
a.pvals  <-  a.cc[, 3]
names(a.pvals)  <-  paste(a.cc[, 1], a.cc[, 2], sep="-")
a.pvals
multcompLetters(a.pvals)
```



subtract gaps

Using conditional formatting in dplyr
```{r}
#if tines_trays == stim C --> no change to lto_h 
#if tines_trays == stim D and lto_h > 0.5 (30 sec), then subtract 0.5 from lto_h
#if tines_trays == stim I and lto_h > 0.75 (45 sec), then subtract 0.75 from lto_h
#if tines_trays == stim J and lto_h > 1 (min), then subtract 1 from lto_h
trunc_exp4_combined <- ltoh_exp4_combined %>%
  mutate(trunc_ltoh = case_when(for_n_lto_h=="C" ~ lto_h,
                                for_n_lto_h=="D" & lto_h>0.5 ~ lto_h-0.5, 
                                for_n_lto_h=="I" & lto_h>0.75 ~ lto_h-0.75,
                                for_n_lto_h=="J" & lto_h>1 ~ lto_h-1))
```

for sample sizes

how many trays have hatchlings that hatched? (which which we got latency)

```{r}
N_trays_latency_e4<-
  trunc_exp4_combined %>%
  group_by(for_n_lto_h) %>%
  summarize(count = n(),
            mean = mean(trunc_ltoh, na.rm=T),
            SE = se(trunc_ltoh, na.rm=T)
            )
kable(N_trays_latency_e4,title="Mean & SE",digits=4)
```

```{r}
latency_clutches_e4<-
  trunc_exp4_combined %>%
  group_by(for_n_lto_h, clutch) %>%
  summarize(num = n(), #sample sizes
            meanlat = mean(trunc_ltoh, na.rm=TRUE)
            )
kable(latency_clutches_e4, digits=3)

N_latency_clutches_e4 <- latency_clutches_e4 %>%
  group_by(for_n_lto_h) %>%
  summarise(clutches= n(), 
            meanlatency = mean(meanlat, na.rm=TRUE),
            medianlatency = median(meanlat, na.rm=TRUE),
            SEnumlatency = sd(meanlat, na.rm=TRUE)/sqrt(n())
            )
kable(N_latency_clutches_e4, digits=3)
```

```{r}
range(trunc_exp4_combined$trunc_ltoh, na.rm=T)

trunc_ltoh_fig_e4_v2 <- trunc_exp4_combined %>% ggplot() +
  aes(x=as.factor(for_n_lto_h), y=trunc_ltoh) +
  geom_boxplot(size=0.75, width=0.15, outlier.shape = NA) +
  geom_beeswarm(size=2)+
  scale_y_continuous(limits=c(0, 2.3),
                     breaks=c(0, 0.5, 1, 1.5, 2),
                     labels=c("0", "0.5", "1", "1.5", "2")
                     )+
  scale_x_discrete(labels=c("C", "D", "I", "J")) + 
  labs(x = "Stimulus", 
       y = "Latency to hatch (m)") +
  theme(panel.background = element_blank())+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  theme(legend.position="none")+
  theme(axis.ticks.length=unit(-0.25, "cm"), axis.text.x = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")), axis.text.y = element_text(margin=unit(c(0.5,0.5,0.5,0.5), "cm")) )

trunc_ltoh_fig_e4_v2
```

```{r}
ggsave("~/Desktop/e4_ltoh_boxplots_trunc.pdf", 
 plot = trunc_ltoh_fig_e4_v2, # or give ggplot object name as in myPlot,
 width = 16, height = 16, 
 units = "cm", # other options c("in", "cm", "mm"), 
 dpi = 400, 
 useDingbats=FALSE)
```

#### stats

```{r}
shapiro.test(trunc_exp4_combined$trunc_ltoh) #P<0.05, so not normal 

test<-pairwise.wilcox.test(trunc_exp4_combined$trunc_ltoh,
                     trunc_exp4_combined$for_n_lto_h, 
                     p.adjust.method = "none")
```

```{r}
#library(multcompView)
test$p.value
#library(reshape)
(a <- melt(test$p.value))
a.cc  <-  na.omit(a)
a.pvals  <-  a.cc[, 3]
names(a.pvals)  <-  paste(a.cc[, 1], a.cc[, 2], sep="-")
a.pvals
multcompLetters(a.pvals)
```

#Hatching Times:

#Exp I

##midpoint hatching

```{r}
nogaps_CvsD <- subset(data, data$experiment==1 & (data$tines_trays=="D" | data$tines_trays=="C") , na.rm=T)

pairwise.wilcox.test(nogaps_CvsD$x50_percent_hatched_s,
                     nogaps_CvsD$gaps_removed, 
                     p.adjust.method = "none")
```

##midrange hatching

```{r}
pairwise.wilcox.test(nogaps_CvsD$diff_75_percent_and_25_percent,
                     nogaps_CvsD$gaps_removed, 
                     p.adjust.method = "none")
```

#Exp II

##midpoint hatching

```{r}
nogaps_CEF <- subset(data, data$experiment==2 & (data$tines_trays=="C" | data$tines_trays=="E" | data$tines_trays=="F") , na.rm=T)

pairwise.wilcox.test(nogaps_CEF$x50_percent_hatched_s,
                     nogaps_CEF$gaps_removed, 
                     p.adjust.method = "none")
```

##midrange hatching

```{r}
pairwise.wilcox.test(nogaps_CEF$diff_75_percent_and_25_percent,
                     nogaps_CEF$gaps_removed, 
                     p.adjust.method = "none")
```

#Exp III

##midpoint hatching

```{r}
nogaps_CDGH <- subset(data, data$experiment==3 & (data$tines_trays=="C" | data$tines_trays=="D" | data$tines_trays=="G" | data$tines_trays=="H") , na.rm=T)

pairwise.wilcox.test(nogaps_CDGH$x50_percent_hatched_s,
                     nogaps_CDGH$gaps_removed, 
                     p.adjust.method = "none")
```

##midrange hatching

```{r}
pairwise.wilcox.test(nogaps_CDGH$diff_75_percent_and_25_percent,
                     nogaps_CDGH$gaps_removed, 
                     p.adjust.method = "none")
```

# hatching over extra 3 pulses

what fraction of total hatched embryos hatched during or after these last 3 "extra" pulses in the "prefix + gap" stimulus (stimulus D or stimulus 22 for Ming)?

```{r}
#hatching times for stimulus 22 (stim D, primer + gaps), experiment 1
hatching_times_D <- readMat("hatching_times_22.mat")

#stimulus length = 6 + 28.5 + 300 = 334.5
#334.5 s
##334.5 s-6s = 328.5

# matrix of 12 lists --> 12 trials of this stimulus (12 clutches) 
# each list = hatching times for any embryos that hatched
df<-data.frame(unlist(hatching_times_D), nrow=length(hatching_times_D), byrow=TRUE)
#any embryos that hatched and the TIMES at which they hatched (in seconds)

#how many hatched? i.e.how many elements in this matrix?
length(df$unlist.hatching_times_D.) #340 individuals hatched

#how much hatching in the LAST 3 pulses (6 seconds)?
subsetdf<- subset(df, unlist.hatching_times_D.>=328.5)
length(subsetdf$unlist.hatching_times_D.) #2 individuals hatched in the last 6 seconds

2/340 #2 hatched in the last 6 seconds out of 340
```

# hatching over pulses in gaps only

how many hatching did the gaps only stimulus (only 10 pulses) elicit, compared to hatching from the first 10 pulses of other stimuli?

could provide evidence that this is probs not simply a reflection of the low total number of pulses in this stimulus - i.e. if the more rapid accumulation of 10 pulses in other stimuli elicited more hatching... 

SO How much hatching occurred in response to the first 10 pulses of all the other stimuli? 

gaps only stimulus from exp 1
```{r}
#hatching times for stimulus 17_1 (stim B, gapsonly), experiment 1
hatching_times_17_1 <- readMat("hatching_times_17_1.mat")

# matrix of 10 lists --> 10 trials of this stimulus (10 clutches) 
# each list = hatching times for any embryos that hatched
df<-data.frame(unlist(hatching_times_17_1), nrow=length(hatching_times_17_1), byrow=TRUE)
#any embryos that hatched and the TIMES at which they hatched (in seconds)

#how many hatched? i.e.how many elements in this matrix?
length(df$unlist.hatching_times_17_1.) #13 individuals hatched

#how much hatching in the first 10 pulses?
subsetdf<- subset(df, unlist.hatching_times_17_1.<=(2*10))
length(subsetdf$unlist.hatching_times_17_1.) #2 individuals hatched in the first 10 pulses (20 seconds)

2/13 #only 2 out of 13 hatched in the first 10 pulses (20 seconds) 
```

#reformat the hatching and timing data to make longer format (per embryo, not per clutch)

for exp 1
```{r}
#hatching times for stimulus 16_1 (base pattern), experiment 1
listHolder <- readMat("hatching_times_16_1.mat")
df<-do.call(rbind, listHolder) 
df_strip<-do.call(rbind, df)
names(df_strip)<-c(1:10:1)
purrr::map_dfr( df_strip, as.list )
```

```{r}
#hatching times for stimulus 17_1 (stim B, gapsonly), experiment 1
listHolder <- readMat("hatching_times_17_1.mat")
df<-do.call(rbind, listHolder) 
df_strip<-do.call(rbind, df)
```
do.call naturally "strips" 1 level of "list of lists", obtaining a list, not a list of lists. After that, rbind can handle the elements on the list and create a matrix. This is useful when the rows are named lists since it keeps the names of the lists (not here)... and it does not change data types like 'unlist' does. 
